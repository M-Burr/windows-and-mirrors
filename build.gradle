plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id "com.github.node-gradle.node" version "2.2.0"
}

group = 'com.capstone'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.hibernate:hibernate:3.5.4-Final'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

processResources {
	from ('frontend/build/') {
		into 'public'
	}
}

node {
	// Version of node to use.
	version = '12.12.0'

	// Version of npm to use.
	npmVersion = '6.11.3'

	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true

	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}/frontend")
}

task installFrontEnd(type: NpmTask) {
	workingDir = file("${project.projectDir}/frontend")
	args = ['install']
}

task buildFrontEnd(type: NpmTask) {
	dependsOn installFrontEnd
	workingDir = file("${project.projectDir}/frontend")
	args = ['run', 'build']
}

bootJar.dependsOn(buildFrontEnd)